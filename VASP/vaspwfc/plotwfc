#!/usr/bin/env python
"""
A wrapper to plot VASP's pseudo wave-functions
Depends on vasp_constant and vaspwfc
"""

from __future__ import print_function
import argparse, os
from vaspwfc import vaspwfc

# Command line praser
#----------------------------
# Do we want to convert the final structure into use primitive cell?
parser = argparse.ArgumentParser(description="A script to plot VASP's pseudo-wavefunction and related densities.")
parser.add_argument('-elf', action="store_true", default=False, dest="lelf",
                    help='Calculate ELF? (Default=False)')
parser.add_argument('-chg', action="store_true", default=False, dest="lchg",
                    help='Calculate band decomposed charge? (Default=False)')
parser.add_argument('-soc', '-ncl',action="store_true", default=False, dest='lsorbit',
                    help='is spinor WAVECAR?. (Default=False)')
parser.add_argument('-s', action="store", default=1, type=int, dest="ispin",
                    help='spin component (Default=1; 1->up, 2->down, 3->both)')
parser.add_argument('-ssoc', action="store", default=1, type=int, dest="ispinsoc",
                    help='spin component (Default=1; 1->up, 2->down, 3->both)')
parser.add_argument('-b', action="store", default=1, type=int, dest="iband",
                    help='band number (Default=1)')
parser.add_argument('-k', action="store", default=1, type=int, dest="ikpt",
                    help='k-point number (Default=1)')
parser.add_argument('-o','--OUTCAR', action="store", default=str('./OUTCAR'), dest="OUTCAR",
                    help='input OUTCAR name (Default=./OUTCAR)')
parser.add_argument('-w','--WAVECAR', action="store", default=str('./WAVECAR'), dest="WAVECAR",
                    help='input WAVECAR name (Default=./WAVECAR)')
parser.add_argument('-c','--POSCAR', action="store", default=str('./POSCAR'), dest="POSCAR",
                    help='input POSCAR name (Default=./POSCAR)')
parser.add_argument('-g', '--gamma', action="store_true", default=False, dest="lgamma",
                    help='vasp_gam ? (Default=False)')
prm = parser.parse_args()

# Starting
#----------------------------
#starttime = time.clock()
#print "Starting calculation at",
#print time.strftime("%H:%M:%S on %a %d %b %Y")

# check input
#----------------------------
if not os.path.isfile(prm.OUTCAR):
    print("\n** ERROR: file %s not found." % prm.OURCAR)
    sys.exit(0)

if not os.path.isfile(prm.WAVECAR):
    print("\n** ERROR: file %s not found." % prm.WAVECAR)
    sys.exit(0)

if not os.path.isfile(prm.POSCAR):
    print("\n** ERROR: file %s not found." % prm.POSCAR)
    sys.exit(0)

# Reading wfc
#----------------------------
if prm.lgamma:
    wav = vaspwfc(prm.WAVECAR, lsorbit=prm.lsorbit, lgamma=True, gamma_half='x')
else:
    wav = vaspwfc(prm.WAVECAR, lsorbit=prm.lsorbit)
# KS orbital in real space, double the size of the FT grid
phi = wav.wfc_r(ispin=prm.ispin,ikpt=prm.ikpt, iband=prm.iband, ngrid=wav._ngrid * 2)

# Processing data
#----------------------------
if prm.lelf == True:
    warning = """
    #-------------------------- WARNING ------------------------------#
    *                ELF mode only suuports ISYM=-1.                  *
    #-----------------------------------------------------------------#
            """
    print(warning)
    # get weight of each kpt
    kptw = []
    with open('IBZKPT') as fp:
        lines = fp.readlines()
        num_kpts = int(lines[1].rstrip("\n"))
        for i in lines[3:3+num_kpts]:
            kptw.append(int(i.rstrip("\n").split()[3]))
    # Calculate elf
    fin_elf = wav.elf(kptw,warn=False)
    # Save elf
    wav.save2vesta(fin_elf[0], prefix="ELF", lreal=True, poscar=prm.POSCAR)
    # Rename elf
    os.rename("ELF_r.vasp", "ELFCAR_WAV.vasp")
elif prm.lelf == False:
    if prm.lsorbit == False:
        if prm.lchg == True:
            wav.save2vesta(phi, prefix="WAV."+str(prm.ikpt).zfill(4)+'.'+str(prm.iband).zfill(4)+'.'+str(prm.ispin).zfill(1), poscar=prm.POSCAR, lchg=True)
        else:
            wav.save2vesta(phi, prefix="WAV."+str(prm.ikpt).zfill(4)+'.'+str(prm.iband).zfill(4)+'.'+str(prm.ispin).zfill(1), poscar=prm.POSCAR)
    elif prm.lsorbit == True:
        if prm.lchg == True:
            print("\n** ERROR: charge plot does not support SOC.")
        else:
            print("spin component:",prm.ispinsoc)
            wav.save2vesta(phi[prm.ispinsoc], prefix='socWAV.'+str(prm.ikpt).zfill(4)+'.'+str(prm.iband).zfill(4)+'.'+str(prm.ispin).zfill(1), poscar=prm.POSCAR)
    else:
        print("\n** ERROR: something wrong.")
        sys.exit(0)
else:
    print("\n** ERROR: something wrong.")
    sys.exit(0)
